/**
 * MILKA DE/AT/NL
 * env: production
 * version: 1.13.2
 * date: 9/2/2022 11:43:40
 */

!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=31)}({10:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var o={includes:function(e,t){for(var n=0;n<t.length;n++){if(t[n]==e)return!0}return!1},filter:function(e,t){var n=[];return e.filter((function(e){var o=e.getAttribute(t);null!=o&&n.push(e)})),n},classExceptionDOM:function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r];o.includes(t,i.classList)||n.push(i)}return n},dynamicSort:function(e){var t=1;return"-"===e[0]&&(t=-1,e=e.substr(1)),function(n,o){return(n[e]<o[e]?-1:n[e]>o[e]?1:0)*t}}}},16:function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var o=n(3);function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.onSubmitSuccess=t.onSubmitSuccess?t.onSubmitSuccess:null,this.formSelector=null!==document.querySelector(t.formSelector)?document.querySelector(t.formSelector):null,this.labelSelector=null!==t.labelSelector?$(t.labelSelector):null,this.labelValueSelector=null!==t.labelValueSelector?$(t.labelValueSelector):null,this.submitBtn=null!==this.formSelector?this.formSelector.querySelector('input[type="submit"]'):null,this.inputs=null!==this.formSelector?this.formSelector.querySelectorAll('input[type]:not([type="submit"]), select, textarea'):[],this.destination=null!=document.querySelector(t.destination)?document.querySelector(t.destination).value:null,this.profileID=t.profileID,this.transactionName=t.transactionName,this.endpointTarget=t.target,this.simpleLoader=new o.b({}),this.subscriptionAttribute=t.subAttribute||"Sub",this.subscription=null==t.subscription?1:t.subscription,this.privacy=t.privacy||0,this.confirmCheckbox=$(t.formSelector+" "+t.confirmCheckbox)||null,this.emailInput=$(t.formSelector+" "+t.emailInput)||null,null!==this.formSelector?this.formSelector.removeAttribute("action"):console.log("%cERR-SH: ".concat(t.headerSelector," is absent from the DOM"),"color: red"),null!==this.submitBtn&&this._initSubmit(),null!==this.emailInput&&null!==this.confirmCheckbox&&this.emailInput.focusin((function(){n.confirmCheckbox.hasClass("hide")&&n.confirmCheckbox.removeClass("hide");var e=null!=document.querySelector(".footer__foot")?document.querySelector(".footer__foot"):null,t=null!=e?e.querySelector("img"):null;null!=e&&null!=t&&(window.outerWidth<1025&&(e.style.paddingTop=0,e.style.height="600px",t.style.height="475px",t.style.objectFit="cover",t.style.objectPosition="100% 0",setTimeout((function(){window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})}),200)),window.outerWidth<769&&(e.style.paddingTop=0,e.style.height="600px",t.style.height="475px",t.style.objectFit="cover",t.style.objectPosition="100% 0",setTimeout((function(){window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})}),200)),window.outerWidth<481&&(e.style.paddingTop=0,e.style.height="750px",t.style.height="750px",t.style.objectFit="unset",t.style.objectPosition="unset",setTimeout((function(){window.scrollTo({top:document.body.scrollHeight,behavior:"smooth"})}),200)))}))}var t,n,i;return t=e,(n=[{key:"_initSubmit",value:function(){var e=this,t=this.submitBtn.parentNode;t.classList.contains("btn__container")?t.addEventListener("click",(function(t){if(t.preventDefault(),!e.submitBtn.parentNode.classList.contains("notvalid")){e.simpleLoader.showLoader();var n=e.getFormData(e.inputs);e.sendSubscription(n)}})):this.submitBtn.addEventListener("click",(function(t){if(t.preventDefault(),!e.submitBtn.parentNode.classList.contains("notvalid")){e.simpleLoader.showLoader();var n=e.getFormData(e.inputs);e.sendSubscription(n)}}))}},{key:"getFormData",value:function(e){for(var t=[],n=0;n<e.length;n++){var o=e[n],r=null!=o.getAttribute("data-sc-field-name")?o.getAttribute("data-sc-field-name"):o.getAttribute("id");switch(o.getAttribute("type")){case"text":t.push({name:r,value:o.value});break;case"checkbox":var i=!0===o.checked?1:0;t.push({name:r,value:i});break;case"radio":o.checked&&(t.push({name:r,value:o.value}),(r="Value-Reason")&&t.push({name:"Value-Reason-Tr",value:o.value}));break;case"hidden":break;default:t.push({name:r,value:o.value})}}return t}},{key:"getLocale",value:function(){return document.querySelector("html").getAttribute("lang")}},{key:"sendSubscription",value:function(e){for(var t=this,n={},o=0;o<e.length;o++){var r=e[o];n[r.name]=r.value}1===this.privacy&&(n.Privacy=this.privacy),n[this.subscriptionAttribute]=this.subscription;var i={ProfileID:this.profileID,Locale:this.getLocale(),Data:n,TransactionName:this.transactionName};e={url:this.endpointTarget,method:"POST",contentType:"application/json",dataType:"json",accepts:"json",data:JSON.stringify(i)},$.ajax(e).success((function(e){e.IsSuccessful&&null!=t.destination&&(t.onSubmitSuccess&&t.onSubmitSuccess(),window.location.href="/"+t.destination)})).error((function(e,n,o){t.simpleLoader.hideLoader(),console.log("%c REQUEST FAILED: ".concat(o),"color: red")}))}}])&&r(t.prototype,n),i&&r(t,i),e}()},17:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return r}));var o="".concat("https://milka-supporting.azurewebsites.net","/supporting/crm/profile"),r="".concat("https://milka-supporting.azurewebsites.net","/supporting/crm/unsubscribeprofile")},2:function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.d(t,"a",(function(){return r}));var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.isScrolling=!1}var t,n,r;return t=e,(n=[{key:"disableScroll",value:function(){document.querySelector("body").style.overflow="hidden"}},{key:"enableScroll",value:function(){document.querySelector("body").style.overflow=""}},{key:"scrollTop",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"slow",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=$(e).length>0?$(e).offset().top+n:null,r=$("html, body");r.on("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove",(function(){r.stop()})),null!==o&&!0!==this.isScrolling&&(this.isScrolling=!0,r.animate({scrollTop:o},t,(function(){
//! executed on function animate complete
r.off("scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove"),this.isScrolling=!1})),this.isScrolling=!1)}}])&&o(t.prototype,n),r&&o(t,r),e}()},3:function(e,t,n){"use strict";n.d(t,"b",(function(){return l})),n.d(t,"a",(function(){return u}));var o=n(2);function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var l=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.display=!1,this.scroll=new o.a,this.container=t.loaderSelector&&document.querySelector(t.loaderSelector)?document.querySelector(t.loaderSelector):document.querySelector(".js-loader"),this.loader=null!==this.container?this.container.querySelector("#simple"):null}var t,n,l;return t=e,(n=[{key:"showLoader",value:function(){!this.display&&this.loader&&(this.scroll.disableScroll(),this.loader.style.display="block"),this.display=!0}},{key:"hideLoader",value:function(){!0===this.display&&null!==this.loader&&(this.scroll.enableScroll(),this.loader.removeAttribute("style")),this.display=!1}},{key:"updateLoader",value:function(){this.loader=null!==this.container?this.container.querySelector("#simple"):null}},{key:"addClass",value:function(e){this.loader.classList.add(e)}},{key:"removeClass",value:function(e){this.loader.classList.remove(e)}}])&&i(t.prototype,n),l&&i(t,l),e}(),u=new l({})},31:function(e,t,n){e.exports=n(32)},32:function(e,t,n){"use strict";n.r(t);var o=n(16),r=n(17);n(10);document.addEventListener("DOMContentLoaded",(function(e){var t,n=r.a,i=r.b;(document.querySelectorAll(".js-subscribe-newsletter").length>0&&new o.a({formSelector:".js-subscribe-newsletter",destination:'input[type="hidden"]#target-go-to-thank-you',labelSelector:".js-confirmation-label",labelValueSelector:".js-confirmation-label-value",profileID:"newsletter_page",transactionName:["newsletter_in"],target:n,onSubmitSuccess:function(){}}),document.querySelectorAll(".js-unsub-form").length>0&&new o.a({formSelector:".js-unsub-form",destination:'input[type="hidden"]#target-go-to-thank-you',profileID:"newsletter_unsub",transactionName:["newsletter_out"],labelSelector:null,labelValueSelector:null,target:i,privacy:1,subscription:1,subAttribute:"Subscription",onSubmitSuccess:function(){}}),null!==document.querySelector('input[data-sc-field-name="Value-Reason"]'))&&function(){for(var e=document.querySelectorAll('input[data-sc-field-name="Value-Reason"]'),n=function(n){(t=e[n]).addEventListener("change",(function(o){var r=document.querySelector(".js-text-reason");n==e.length-1&&t.checked?r.classList.remove("hide"):r.classList.add("hide")}))},o=0;o<e.length;o++)n(o)}()}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=newsletter.min.js.map
