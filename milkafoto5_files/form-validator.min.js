/**
 * MILKA DE/AT/NL
 * env: production
 * version: 1.13.2
 * date: 9/2/2022 11:43:40
 */

!function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=27)}({0:function(e,t,r){"use strict";r.d(t,"a",(function(){return n}));var a=["/"],n={trim:function(e){return e.replace(/\s/g,"")},replace:function(e,t,r){return e.replace(t,r)},replaceSpecialChar:function(e){for(var t=e,r=0;r<a.length;r++){var n=a[r];t=t.replace(n,"-")}return t},cleanFilterCategory:function(e){return n.replaceSpecialChar(n.trim(e)).toLowerCase()},toDataSelector:function(e){var t=n.cleanFilterCategory(e),r=t[0].toUpperCase();if(n.findChar("-",t)){var a=t.indexOf("-"),i=a+1,l=t[i].toUpperCase();t=t.slice(0,a)+l+t.slice(i+1,t.length)}return"selected"+(t=r+t.slice(1,t.length))},findChar:function(e,t){try{if(t&&"string"==typeof t&&t.indexOf(e)>-1)return!0}catch(e){console.error(e),console.error(t)}return!1},testRegex:function(e,t){var r=!1;return new RegExp(t).test(e)&&(r=!0),r}}},27:function(e,t,r){e.exports=r(42)},42:function(e,t,r){"use strict";r.r(t);var a=r(0);function n(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i="data-val-required",l="data-val-regex-pattern",o="data-sc-field-name",c=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.forms=document.querySelectorAll("form:not([id='search-form'])"),document.querySelectorAll(".js-form-no-action").length>0)for(var t=document.querySelectorAll(".js-form-no-action"),r=0;r<t.length;r++){t[r].removeAttribute("action")}this.forms.length>0&&this._init()}var t,r,c;return t=e,(r=[{key:"_init",value:function(){for(var e=0;e<this.forms.length;e++){var t=this.forms[e],r=t.querySelector('input[type="submit"]'),a=document.querySelector(".form-input__button.".concat(t.parentNode.dataset.formIdentification));this._initInputs(t,a,r),this._initSimpleBtn(a,t),this._initSubmit(r,t)}}},{key:"_initSubmit",value:function(e,t){var r=this;null!==e&&e.addEventListener("click",(function(a){a.preventDefault();var n=[],l=t.querySelectorAll('input[type="text"],input[type="tel"],input[type="number"],input[type="email"],input[type="password"],textarea'),o=t.querySelectorAll('input[type="checkbox"]');if(t.parentNode.classList.contains("checkout-payment__right-form")&&t.querySelectorAll(".js-act-payment-method").length>0){var c=t.querySelectorAll(".js-act-payment-method");[].forEach.call(c,(function(e){var t=e.querySelectorAll("input[".concat(i,"],textarea[").concat(i,"]"));e.classList.contains("hide")&&t.length>0&&(n=[].slice.call(t,0))}))}if(r.validateAllInputs(n,l,o,e.parentNode)){if(t.classList.contains("review-overlay__form")){var u=t.querySelector(".form-input__error--global");null!==u&&u.classList.remove("show")}}else if(a.stopImmediatePropagation(),t.classList.contains("review-overlay__form")){for(var s=t.querySelectorAll(".form-input__error"),d=0;d<s.length;d++)s[d].classList.add("hide");var v=t.querySelector(".form-input__error--global");null!==v&&v.classList.add("show")}}))}},{key:"_initSimpleBtn",value:function(e,t){var r=this;null!==e&&e.addEventListener("click",(function(a){if(a.preventDefault(),!e.classList.contains("header__search")){var n=[],l=t.querySelectorAll('input[type="text"],input[type="tel"],input[type="number"],input[type="email"],input[type="password"],textarea'),o=t.querySelectorAll('input[type="checkbox"]'),c=t.querySelectorAll('input[type="radio"][name="delivery_option"]');if(t.parentNode.classList.contains("checkout-payment__right-form")&&t.querySelectorAll(".js-act-payment-method").length>0){var u=t.querySelectorAll(".js-act-payment-method");[].forEach.call(u,(function(e){e.classList.contains("hide")&&e.querySelectorAll("input[".concat(i,"],textarea[").concat(i,"]")).length>0&&(n=[].slice.call(e.querySelectorAll("input[".concat(i,"],textarea[").concat(i,"]")),0))}))}if(null!==t.querySelector(".js-payment-adress-form")&&t.querySelector(".js-payment-adress-form").classList.contains("active")&&t.querySelector(".js-payment-adress-form").querySelectorAll("input[".concat(i,"],textarea[").concat(i,"]")).length>0){var s=[].slice.call(t.querySelector(".js-payment-adress-form").querySelectorAll("input[".concat(i,"],textarea[").concat(i,"]")),0);n=s.concat(n)}var d=r.validateAllInputs(n,l,o,e);if("delivery-form"===t.parentNode.dataset.formIdentification){if(!(!c.length>0))return;r.deliverySelected()||(d=!1)}d||a.stopImmediatePropagation()}}))}},{key:"_initInputs",value:function(e,t,r){for(var a=e.querySelectorAll('input[type="text"],input[type="tel"],input[type="number"],input[type="email"],input[type="password"],textarea'),n=e.querySelectorAll('input[type="checkbox"]'),i=[].concat([].slice.call(a,0),[].slice.call(n,0)),l=0;l<i.length;l++){var o=i[l];"checkbox"===o.type?this._initCheckBoxes(o,t,r):"number"===o.type?this._initNumber(o,t,r):this._initInput(o,t,r)}}},{key:"_initInput",value:function(e,t,r){var n=this;if(e.addEventListener("blur",(function(a){a.preventDefault(),null!==t?n.validateInput(e,t):r&&n.validateInput(e,r.parentNode)})),a.a.findChar("Confirm",e.getAttribute(o))){var i=e.getAttribute(o).substr("Confirm".length),l=e.closest("form").querySelector("input[".concat(o,"='").concat(i,"']"));l&&(l.value.length<1&&e.setAttribute("disabled",!0),l.addEventListener("change",(function(t){l.value.length<1?e.setAttribute("disabled",!0):e.removeAttribute("disabled")})))}}},{key:"_initCheckBoxes",value:function(e,t,r){var a=this;e.addEventListener("change",(function(n){n.preventDefault(),null!==t?a.validateCheckbox(e,t):a.validateCheckbox(e,r.parentNode),"payment_adress"===n.target.getAttribute(o)&&document.querySelector(".checkout-payment__go-to-review")&&document.querySelector(".checkout-payment__go-to-review").classList.remove("notvalid")}))}},{key:"_initNumber",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;e.addEventListener("change",(function(n){n.preventDefault(),null!==r?t.validateInput(e,r):t.validateInput(e,a.parentNode)}))}},{key:"contains",value:function(e,t){for(var r=0;r<e.length;r++)if(e[r].name===t.name)return r;return-1}},{key:"validateAllInputs",value:function(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a=arguments.length>3?arguments[3]:void 0,n=0,i=[].concat([].slice.call(t,0),[].slice.call(r,0)),l=0;l<i.length;l++){var o=i[l],c=this.contains(e,o);c>-1?e.splice(c,1):this.validateInput(o,a)||n++}if(r&&r.length)for(var u=0;u<r.length;u++){var s=r[u],d=this.contains(e,s);d>-1?e.splice(d,1):this.validateCheckbox(s,a)||n++}return!(n>0)}},{key:"validateMandatory",value:function(e){if(null!==e&&"true"!==e.getAttribute("disabled")){var t=e.value,r=!1;return 0==a.a.trim(t).length?(r=!1,this.displayError(e,i),r):"number"===e.type&&parseInt(t)<1?(r=!1,this.displayError(e,i),r):this.validateText(e)?r=!0:r}}},{key:"validateInput",value:function(e,t){var r=!1,n=e.closest("form"),l=n.querySelectorAll(".notvalid").length;if(a.a.findChar("Confirm",e.getAttribute(o))){var c=e.getAttribute(o).substr("Confirm".length);if(!this.validateSimilar(e,n.querySelector("input[".concat(o,"='").concat(c,"']"))))return t.classList.add("notvalid"),t.parentNode&&t.parentNode.hasAttribute("href")&&t.parentNode.classList.add("notvalid"),r;this.hideError(e),l<2&&(t.classList.remove("notvalid"),t.parentNode&&t.parentNode.classList.remove("notvalid")),r=!0}if(e.hasAttribute(i)?this.validateMandatory(e)?(this.hideError(e),l<2&&(t.classList.remove("notvalid"),t.parentNode&&t.parentNode.classList.remove("notvalid")),r=!0):(r=!1,t.classList.add("notvalid"),t.parentNode&&t.parentNode.hasAttribute("href")&&t.parentNode.classList.add("notvalid")):this.validateText(e)?(this.hideError(e),l<2&&(t.classList.remove("notvalid"),t.parentNode&&t.parentNode.classList.remove("notvalid")),r=!0):(r=!1,t.classList.add("notvalid"),t.parentNode&&t.parentNode.hasAttribute("href")&&t.parentNode.classList.add("notvalid")),"Amount"==e.getAttribute(o)){var u=this.validateAmount(e);if(!e.hasAttribute(i))return this.hideError(e),l<2&&(t.classList.remove("notvalid"),t.parentNode&&t.parentNode.classList.remove("notvalid")),r=!0;if(!u)return r=!1,t.classList.add("notvalid"),t.parentNode&&t.parentNode.hasAttribute("href")&&t.parentNode.classList.add("notvalid"),r;this.hideError(e),l<2&&(t.classList.remove("notvalid"),t.parentNode&&t.parentNode.classList.remove("notvalid")),r=!0}return r}},{key:"validateCheckbox",value:function(e,t){return!e.hasAttribute(i)||(e.checked?(this.hideError(e),t.classList.remove("notvalid"),t.parentNode&&t.parentNode.classList.remove("notvalid")):(this.displayError(e,i),t.classList.add("notvalid"),t.parentNode&&t.parentNode.hasAttribute("href")&&t.parentNode.classList.add("notvalid")),e.checked)}},{key:"validateText",value:function(e){if(null!==e){var t=e.hasAttribute(l),r=e.hasAttribute("data-val-length-min"),n=e.value,i=!1;if(t){var o=e.getAttribute(l);if(!(i=a.a.testRegex(n,o)))return this.displayError(e,"data-val-regex"),i}else i=!0;return r&&(i=!(n.length<e.getAttribute("data-val-length-min"))),i||this.displayError(e),i}}},{key:"validateSimilar",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;return!e||!t||e.value===t.value||(this.displayError(e,"data-val-regex"),!1)}},{key:"displayError",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"default",r=e.getAttribute("name")||"null",a="default"!==t?e.getAttribute(t):null,n=document.querySelector('span[data-valmsg-for="'.concat(r,'"]'));null!=n&&n.classList.add("form-input__error"),null!==n&&null!==a&&(n.innerText=a),e.parentNode.classList.add("notvalid")}},{key:"hideError",value:function(e){var t=e.getAttribute("name"),r=document.querySelector('span[data-valmsg-for="'.concat(t,'"]'));r&&(r.innerHTML=""),e.parentNode.classList.remove("notvalid")}},{key:"deliverySelected",value:function(){var e=0;if(document.querySelectorAll(".custom-radio__input").length>0){var t=document.querySelectorAll(".custom-radio__input");[].forEach.call(t,(function(t){t.checked&&e++}))}if(0===e){var r=document.querySelector(".delivery-option"),a=null!=r?r.querySelectorAll(".custom-radio__label"):null;null!=a&&[].forEach.call(a,(function(e){e.classList.add("notvalid")}));var n=document.querySelector(".error-delivery_option");null!=n&&n.classList.remove("hide")}return e>0}},{key:"validateAmount",value:function(e){var t,r,n=e.value,i=null===(t=document.querySelector("div[data-lang]"))||void 0===t?void 0:t.getAttribute("data-lang"),l=null===(r=document.querySelector("div[data-currency]"))||void 0===r?void 0:r.getAttribute("data-currency"),o=new RegExp(this.getCurrencySymbol(i,l),"g");if(a.a.findChar(",",n)&&(n=n.replace(".","")),a.a.findChar("de-",i)&&n.indexOf(".")+3<n.length&&(n=n.replace(".","")),n=n.replace(",","."),i){var c=new Intl.NumberFormat(i,{style:"currency",currency:l}).format(parseFloat(n).toFixed(3));c=c.replace(o,"").replace(/\s+/g,"");var u=e.value==c;return a.a.findChar(",",e.value)&&(a.a.findChar(".",e.value)||u)||(u=e.value==c.replace(/0+$/,"").replace(/\.+$/,"").replace(/\,+$/,"")),u||this.displayError(e,"data-val-regex"),u}return!0}},{key:"getCurrencySymbol",value:function(e,t){return(0).toLocaleString(e,{style:"currency",currency:t,minimumFractionDigits:0,maximumFractionDigits:0}).replace(/\d/g,"").trim()}}])&&n(t.prototype,r),c&&n(t,c),e}();document.addEventListener("DOMContentLoaded",(function(e){new c;var t=document.querySelector("html");new MutationObserver((function(e,t){for(var r=0;r<e.length;r++){var a=e[r];"childList"===a.type&&a.addedNodes.length>0&&a.target.classList.contains("slick-track")&&a.target.classList.contains("slick-slider")&&a.target.classList.contains("slick-list")&&new c}})).observe(t,{attributes:!1,childList:!0,subtree:!0})}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=form-validator.min.js.map
